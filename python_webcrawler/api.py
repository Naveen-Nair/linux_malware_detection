import requests
import pyzipper
import os

#Specify the URL and other query data
url = "https://mb-api.abuse.ch/api/v1/"

#usable families: Tsunami, Mirai, DeimosC2, Gafgyt
family = 'Mirai'
path = 'executables/' + family + '/'
file_no = 1
wrong_tags = ['arm','motorola']

#Hash values to be downloaded
hash_arr = []

#Creating the directory if it doesnt exist
if not os.path.isdir(path):
    os.makedirs(path)

try:
    #Specify the payload as a dictionary
    payload1 = {
        'query': 'get_siginfo',
        'signature': family,
        'limit': file_no
    }
    
    #Sending the POST request
    response1 = requests.post(url, data=payload1)

    #Checking for valid Response
    if response1.status_code == 200:
        json_data = response1.json()
        
        if json_data["query_status"] != 'ok':
            raise Exception("Payload1: " + json_data["query_status"])
        
        data_value = json_data.get('data')
        
        #Ensuring files dont have wrong tags
        for sample in data_value:
            flag = 1
            for tag in sample["tags"]:
                if tag in wrong_tags:
                    flag = 0
            if flag:
                hash_arr.append(sample["sha256_hash"])
        
        #Downloading the files
        for hash in hash_arr:
            
            #Sending file download request
            payload2 = {
            'query': 'get_file',
            'sha256_hash': hash
            }
            response2 = requests.post(url, data=payload2)
            
            response_data = response2.content
            zipped_file = path + str(hash) + '.zip'
            file = str(hash_arr[0]) + '.elf'
            
            #Downloading and Unzipping the sample
            with open(zipped_file, 'wb') as z:
                z.write(response_data)
                
            with pyzipper.AESZipFile(zipped_file) as zf:
                zf.setpassword(b'infected')
                malware_data = zf.read(file)
            
            with open(path + file,'wb') as f:
                f.write(malware_data)
            
            #Deleting the zipped file
            os.remove(zipped_file)
    
    #Checking error in request
    else:
        raise Exception("Request Issue")
        
except Exception as err:
    print(err)
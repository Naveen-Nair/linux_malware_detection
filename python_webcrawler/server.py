import requests
from bs4 import BeautifulSoup
import json
from flask import Flask, request, send_file


#########################################################################################################################################################

def familyChecker(family_name, threshold):
    new_url = "https://samples.vx-underground.org/samples/Families/" + family_name + "/"
    full_links_arr = []
    try:
        response = requests.get(new_url)
        html_content = response.content

        soup = BeautifulSoup(html_content, 'html.parser')
        if( soup.find('tbody').find_all('td',{'class':'link'})[1].find('a').text[0:3] == 'Pap' ):

            url = new_url + 'Samples/'

            response = requests.get(url)
            html_content = response.content

            soup = BeautifulSoup(html_content, 'html.parser')



        for linkElem in soup.find('tbody').find_all('tr'):
            size = linkElem.find('td',{'class' : 'size'}).text
            if(size != '-' and int(size) < threshold):
                size = int(size)
                link = linkElem.find('td',{'class' : 'link'}).find('a').get('href')
                full_links_arr.append({'virus': link, 'size' : size})


    except:
        print(family_name)

    return full_links_arr


#########################################################################################################################################################

def findMinLinks(begin, end, threshold):
    url = "https://samples.vx-underground.org/samples/Families/"
    response  = requests.get(url)
    html_content = response.content

    soup = BeautifulSoup(html_content, 'html.parser')

    familyArr = []
    for linkElem in soup.find_all('tbody')[0].find_all('tr'):
        link = linkElem.find('td',{'class' : 'link'}).find_all('a')[0].get('href')
        familyArr.append(link)

    min_link_arr = []

    for ind in range(begin, end):
        family = familyArr[ind]
        try:

            if(family=='../'):
                continue

            url = family

            response = requests.get(url)
            html_content = response.content

            soup = BeautifulSoup(html_content, 'html.parser')
            familyName =  url.split('/')[-2]

            if( soup.find('tbody').find_all('td',{'class':'link'})[1].find('a').text[0:3] == 'Pap' ):

                url = family + 'Samples/'

                response = requests.get(url)
                html_content = response.content

                soup = BeautifulSoup(html_content, 'html.parser')
                familyName =  url.split('/')[-3]


            min_size = threshold
            min_link = ""

            for linkElem in soup.find('tbody').find_all('tr'):
                size = linkElem.find('td',{'class' : 'size'}).text
                if(size != '-' and int(size) < min_size):
                    min_size = int(size)
                    min_link = linkElem.find('td',{'class' : 'link'}).find('a').get('href')

            min_link_arr.append({'family' :familyName, 'smallest_virus': min_link, 'size' : min_size})
            if(min_size == 0):
                print(family)
        except:
            print(family)
            

    return min_link_arr


#########################################################################################################################################################

def writeJSON(min_link_arr, fileName):
    json_string = json.dumps(min_link_arr)

    with open(fileName, "w") as f:
        f.write(json_string)

    f.close()


#########################################################################################################################################################


app = Flask(__name__)

@app.route('/links')
def get_links():
    # return 'hello'
    begin = request.args.get('begin')
    end = request.args.get('end')
    threshold = request.args.get('threshold')

    
    link_arr = findMinLinks(int(begin), int(end), int(threshold))
    filename = 'links.json'
    writeJSON(link_arr, filename)
    return send_file(filename, as_attachment=True)


@app.route('/family')
def family_links():
    # return 'hello'
    family_name = request.args.get('family')
    threshold = request.args.get('threshold')

    
    link_arr = familyChecker(family_name, int(threshold))
    filename = family_name+'_links.json'
    writeJSON(link_arr, filename)
    return send_file(filename, as_attachment=True)



if __name__ == '__main__':
    app.run()
